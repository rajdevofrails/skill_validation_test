<div class="check-form-container">
  <%= form_with(model: [check.company, check], local: true, multipart: true) do |form| %>

    <div style="margin-bottom: 20px;">
      <%= form.label :image, "Choose Image Option", class: "check-form-label" %>
      <div style="display: flex; justify-content: space-around;">
        <button type="button" id="select-capture" class="check-form-button capture">Capture Image</button>
        <button type="button" id="select-upload" class="check-form-button upload">Upload Image</button>
      </div>
    </div>

    <div id="capture-section" class="capture-section">
      <video id="webcam" autoplay playsinline class="video-preview"></video>
      <canvas id="canvas" style="display: none;"></canvas>
      <button type="button" id="capture" class="check-form-button">Capture</button>
      <div id="preview">
        <img id="preview-img" class="preview-image" />
      </div>
    </div>

    <%= form.hidden_field :image, id: "captured_image" %>

    <div id="upload-section" class="upload-section">
      <%= form.file_field :image, id: "file_upload", class: "check-form-input" %>
    </div>

    <div style="margin-bottom: 20px;">
      <%= form.label :number, "Check Number", class: "check-form-label" %>
      <%= form.number_field :number, class: "check-form-input" %>
    </div>

    <div style="margin-bottom: 20px;">
      <%= form.label :status, "Status", class: "check-form-label" %>
      <%= form.text_field :status, class: "check-form-input" %>
    </div>

    <div style="margin-bottom: 20px;">
      <%= form.label :invoice_ids, "Associated Invoices", class: "check-form-label" %>
      <%= form.collection_select :invoice_ids, @company.invoices, :id, :category, { prompt: "Select Invoices" }, { multiple: true, class: "check-form-select" } %>
    </div>

    <div style="text-align: center;">
      <%= form.submit "Upload Check", class: "check-form-submit" %>
    </div>

  <% end %>
</div>


<script>
  document.addEventListener("DOMContentLoaded", function() {
    const selectCapture = document.getElementById('select-capture');
    const selectUpload = document.getElementById('select-upload');
    const captureSection = document.getElementById('capture-section');
    const uploadSection = document.getElementById('upload-section');
    const video = document.getElementById('webcam');
    const canvas = document.getElementById('canvas');
    const captureButton = document.getElementById('capture');
    const capturedImageField = document.getElementById('captured_image');
    const fileUpload = document.getElementById('file_upload');
    const preview = document.getElementById('preview');
    const previewImg = document.getElementById('preview-img');
    let stream = null;

    // Hide both sections initially
    captureSection.style.display = 'none';
    uploadSection.style.display = 'none';

    // Show webcam capture section
    selectCapture.addEventListener('click', () => {
      captureSection.style.display = 'block';
      uploadSection.style.display = 'none';

      navigator.mediaDevices.getUserMedia({ video: true })
        .then(mediaStream => {
          stream = mediaStream;
          video.srcObject = stream;
        })
        .catch(err => {
          console.error("Error accessing webcam: ", err);
          alert("Could not access webcam. Please use file upload instead.");
        });
    });

    // Show file upload section
    selectUpload.addEventListener('click', () => {
      uploadSection.style.display = 'block';
      captureSection.style.display = 'none';

      if (stream) {
        stream.getTracks().forEach(track => track.stop());
        video.srcObject = null;
      }
    });

    // Capture image from webcam
    captureButton.addEventListener('click', () => {
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext('2d').drawImage(video, 0, 0);
      const imageData = canvas.toDataURL('image/png');
      capturedImageField.value = imageData;
      previewImg.src = imageData;
      previewImg.style.display = 'block';

      if (stream) {
        stream.getTracks().forEach(track => track.stop());
        video.srcObject = null;
      }
    });
  });
</script>
